--Stworzenie tabeli myszy
AlTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

DROP TABLE Myszy;

DECLARE
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE 'CREATE TABLE Myszy(
            id_myszy NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT my_pk PRIMARY KEY,
            lowca VARCHAR(15) CONSTRAINT my_lw_fk REFERENCES Kocury(pseudo),
            zjadacz VARCHAR(15) CONSTRAINT my_zj_fk REFERENCES Kocury(pseudo),
            waga_myszy NUMBER NOT NULL CONSTRAINT my_wm_ck CHECK(waga_myszy BETWEEN 1 AND 20),
            data_zlowienia DATE NOT NULL,
            data_wydania DATE
                constraint m_dw check (data_wydania = (next_day(last_day(data_wydania) - INTERVAL ''7'' DAY, ''Środa''))))';
  COMMIT;
END;

DECLARE
    TYPE daneKocurow IS RECORD (PSEUDO KOCURY.PSEUDO%TYPE, MYSZY NUMBER(3));
    TYPE tablicaKocurow IS TABLE OF daneKocurow INDEX BY BINARY_INTEGER;
    koty tablicaKocurow;

    type wierszMyszy is record (
    id_myszy MYSZY.id_myszy%type,
    lowca MYSZY.lowca%type,
    zjadacz MYSZY.zjadacz%type,
    waga_myszy MYSZY.waga_myszy%type,
    data_zlowienia MYSZY.data_zlowienia%type,
    data_wydania MYSZY.data_wydania%type
    );
    type tablicaMyszy is table of wierszMyszy index by binary_integer;
    --TYPE tablicaMyszy IS TABLE OF MYSZY%ROWTYPE INDEX BY BINARY_INTEGER; -- Jak robie tak to nie wykrywa pól przy przydzielaniu myszy
    myszyDoZapisania tablicaMyszy; -- To będzie zapisywane

    ostatniaSrodaMiesiacaNext DATE := '2004-01-01';
    temporaryDate DATE;
    sredniaLiczbaMyszy Integer;
    liczbaZlapanychMyszy Integer := 1;
    liczbaPrzydzielonychMyszy Integer := 1;
    BEGIN
        WHILE ostatniaSrodaMiesiacaNext < SYSDATE LOOP
            temporaryDate := ostatniaSrodaMiesiacaNext;
            ostatniaSrodaMiesiacaNext := (next_day(last_day(add_months(ostatniaSrodaMiesiacaNext, 1)) - INTERVAL '7' DAY, 'Środa'));

            select pseudo, przydzial_myszy + nvl(myszy_extra,0) bulk collect into koty from kocury where w_stadku_od <= temporaryDate;  -- masowe pobieranie danych

            --wziecie sredniej
            select ceil(avg(przydzial_myszy + nvl(myszy_extra, 0)))
            into sredniaLiczbaMyszy
            from kocury
            where w_stadku_od <= temporaryDate;

            --przydzielanie myszy dla konkretnego kota
            for j in 1..koty.count loop
              for k in 1..sredniaLiczbaMyszy loop
                myszyDoZapisania(liczbaZlapanychMyszy).id_myszy := liczbaZlapanychMyszy;
                myszyDoZapisania(liczbaZlapanychMyszy).lowca := koty(j).pseudo;
                myszyDoZapisania(liczbaZlapanychMyszy).waga_myszy := dbms_random.value(2,19);
                myszyDoZapisania(liczbaZlapanychMyszy).data_zlowienia := temporaryDate + dbms_random.value(0,25);
                myszyDoZapisania(liczbaZlapanychMyszy).data_wydania := ostatniaSrodaMiesiacaNext;
                liczbaZlapanychMyszy := liczbaZlapanychMyszy + 1;
              end loop;
            end loop;

            --uzupelnianie pola zjadacz
            for j in 1..koty.count loop
                for k in 1..koty(j).myszy loop
                    myszyDoZapisania(liczbaPrzydzielonychMyszy).zjadacz := koty(j).pseudo;
                    liczbaPrzydzielonychMyszy := liczbaPrzydzielonychMyszy + 1;
                end loop;
            end loop;

            --Przydzielenie nadwyzki czyli jesli zjadaczy bylo mniej niz lapaczy
            while liczbaPrzydzielonychMyszy < liczbaZlapanychMyszy loop
                myszyDoZapisania(liczbaPrzydzielonychMyszy).zjadacz := 'TYGRYS';
                liczbaPrzydzielonychMyszy := liczbaPrzydzielonychMyszy + 1;
            end loop;
        END LOOP;
        -- Masowe zapisywanie
        forall j in 1..myszyDoZapisania.count save exceptions
            insert into Myszy
            values (myszyDoZapisania(j).id_myszy, myszyDoZapisania(j).lowca, myszyDoZapisania(j).zjadacz,
                    myszyDoZapisania(j).waga_myszy, myszyDoZapisania(j).data_zlowienia, myszyDoZapisania(j).data_wydania);
        myszyDoZapisania.delete();
        koty.delete();
        EXCEPTION WHEN OTHERS THEN dbms_output.put_line(SQLERRM);
    END;
commit;
select count(*) from MYSZY;


-- tworzenie konta dla kazdej myszy
declare tablesCreation varchar2(2000);
begin
  for kocur in (select pseudo from kocury)
    loop
      tablesCreation:='create table myszy_' || kocur.pseudo ||'(
      nr_myszy integer constraint pk_nr_myszy_' || kocur.pseudo || ' primary key,
      waga_myszy number(3) constraint c_waga_myszy_' || kocur.pseudo ||' check (waga_myszy between 1 and 20),
      data_zlowienia date constraint nn_data_zlowienia' || kocur.pseudo ||' not null)';
      execute immediate tablesCreation;
    end loop;
exception
  when others then
  dbms_output.put_line(sqlerrm);
end;

-- dropowanie wszytkich kont myszy
declare tablesDeletion varchar2(2000);
begin
  for kocur in (select pseudo from kocury)
    loop
      tablesDeletion:='drop table myszy_' || kocur.pseudo;
      execute immediate tablesDeletion;
    end loop;
exception
  when others then
  dbms_output.put_line(sqlerrm);
end;

--WPŁATA

CREATE OR REPLACE PROCEDURE wplata(lapacz KOCURY.PSEUDO%TYPE, data_zlapania DATE) AS
        liczba_znalezionych_kotow INTEGER;
        indeks MYSZY.id_myszy%TYPE;

        type wierszMyszy is record (
        id_myszy MYSZY.id_myszy%type,
        lowca MYSZY.lowca%type,
        zjadacz MYSZY.zjadacz%type,
        waga_myszy MYSZY.waga_myszy%type,
        data_zlowienia MYSZY.data_zlowienia%type,
        data_wydania MYSZY.data_wydania%type
        );
        type myszyTabela is table of wierszMyszy index by binary_integer;
        myszyLista myszyTabela;

        type myszyKotaDoZgloszenia is record (
        id_myszy MYSZY.id_myszy%type,
        waga_myszy myszy.waga_myszy%type,
        data_zlowienia myszy.data_zlowienia%type
        );
        type myszyKotaTabela is table of myszyKotaDoZgloszenia index by binary_integer;
        myszyKota myszyKotaTabela;
        exception_kot_nieznaleziony exception;

        selectDoZnalezieniaDanychMyszy varchar2(2000);
        selectDoUsunieciaDanychMyszy varchar2(2000);
    BEGIN
        select count(*) into liczba_znalezionych_kotow from kocury where pseudo = lapacz;

        if liczba_znalezionych_kotow = 0 then
          raise exception_kot_nieznaleziony;
        end if;

        select max(indeks) into indeks from myszy;
        indeks := indeks + 1;

        selectDoZnalezieniaDanychMyszy := 'select * from myszy_' || lapacz || ' where data_zlowienia = ''' || data_zlapania || '''';

        execute immediate selectDoZnalezieniaDanychMyszy
        bulk collect into myszyKota;

        for i in 1..myszyKota.count loop
          myszyLista(i).id_myszy := indeks;
          myszyLista(i).lowca := lapacz;
          myszyLista(i).waga_myszy := myszyKota(i).waga_myszy;
          myszyLista(i).data_zlowienia := myszyKota(i).data_zlowienia;
          indeks := indeks + 1;
        end loop;

        forall j in 1..myszyLista.count save exceptions
            insert into myszy
            values(myszyLista(j).id_myszy, myszyLista(j).lowca, null, myszyLista(j).waga_myszy, to_char(myszyLista(j).data_zlowienia), null);
            selectDoUsunieciaDanychMyszy:='delete from myszy_'|| lapacz || ' where data_zlowienia = ''' || data_zlapania || '''';
            execute immediate selectDoUsunieciaDanychMyszy;
    exception
      when exception_kot_nieznaleziony then
      dbms_output.put_line('Kot o podanym pseudonimie nie istnieje');
end wplata;


insert into myszy_tygrys values(1,11,to_date('2019-01-20'));
insert into myszy_tygrys values(2,19,to_date('2019-01-20'));
insert into myszy_tygrys values(3,5,to_date('2019-01-20'));
insert into myszy_tygrys values(4,6,to_date('2019-01-20'));

commit;


declare begin
  wplata('TYGRYS',to_date('2019-01-20'));
end;
select * from myszy where DATA_ZLOWIENIA = '2019-01-20';


-- WYPŁATA

create or replace procedure wyplata as
        dataWyplaty date := (next_day(last_day(SYSDATE) - INTERVAL '7' DAY, 'Środa'));

        type wierszMyszy is record (
        id_myszy MYSZY.id_myszy%type,
        lowca MYSZY.lowca%type,
        zjadacz MYSZY.zjadacz%type,
        waga_myszy MYSZY.waga_myszy%type,
        data_zlowienia MYSZY.data_zlowienia%type,
        data_wydania MYSZY.data_wydania%type
        );
        type myszyTabela is table of wierszMyszy index by binary_integer;
        dostepneMyszy myszyTabela;

        type dane_kota is record(
          pseudo kocury.pseudo%type,
          myszy number(3)
        );
        type tablica_kotow is table of dane_kota index by binary_integer;
        koty tablica_kotow;
        indexKota INTEGER := 1;
        mysz_szuka_wlasciciela boolean := true;
        czy_leci_od_nowa INTEGER;
begin
    select * bulk collect into dostepneMyszy from myszy where zjadacz is null;

    select pseudo, przydzial_myszy + nvl(myszy_extra, 0) as myszy
    bulk collect into koty from kocury
    where w_stadku_od <= dataWyplaty
    start with szef is null connect by prior pseudo = szef
    order by level;

    for i in 1..dostepneMyszy.count loop
        mysz_szuka_wlasciciela := true;
        czy_leci_od_nowa := indexKota
        while mysz_szuka_wlasciciela loop
            if indexKota > koty.COUNT then
                indexKota := 1;
            end if;
            if koty(indexKota).myszy > 0 then
                dostepneMyszy(i).zjadacz := koty(indexKota).pseudo;
                dostepneMyszy(i).data_wydania := dataWyplaty;
                koty(indexKota).myszy := koty(indexKota).myszy - 1;
                mysz_szuka_wlasciciela := false;
            end if;
            indexKota := indexKota + 1;

            if czy_leci_od_nowa=indexKota then
                dostepneMyszy(i).zjadacz := 'TYGRYS'; -- Tu można dać kogokolwiek
                dostepneMyszy(i).data_wydania := dataWyplaty;
                mysz_szuka_wlasciciela := false;
            end if;
        end loop;
    end loop;

    forall j in 1..dostepneMyszy.count save exceptions
    update myszy
    set data_wydania = dostepneMyszy(j).data_wydania, zjadacz = dostepneMyszy(j).zjadacz
    where ID_MYSZY = dostepneMyszy(j).id_myszy;
end wyplata;


declare begin
  wyplata();
end;